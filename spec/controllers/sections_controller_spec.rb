require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.	If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.	There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.	Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SectionsController do
	include Mongoid::Document
	include CourseMockHelpers

	# This should return the minimal set of attributes required to create a valid
	# Section. As you add validations to Section, be sure to
	# update the return value of this method accordingly.
	def valid_attributes
		{
			room: 501,
			academic_year: Settings.academic_year,
			semester: Course::FIRST_SEMESTER,
			block: "B"
		}
	end

	# This should return the minimal set of values that should be in the session
	# in order to pass any filters (e.g. authentication) defined in
	# SectionsController. Be sure to keep this updated too.
	def valid_session
		{}
	end

	context "guest accessible" do
		
		 describe "GET 'assignments'" do
			it "display the assignments page" do
				section = Section.create! valid_attributes
				get :assignments, {id: section.to_param}
				response.should be_success
				assigns(:section).should eq(section)
			end
		end

	end

	context "teacher accessible" do
		login_teacher
 
		describe "GET edit" do
			it "assigns the requested section as @section" do
				section = Section.create! valid_attributes
				get :edit, {:id => section.to_param}
				response.should be_success
				assigns(:section).should eq(section)
			end
		end

		describe "GET new" do
			it "assigns a new section as @section" do
				get :new, {}
				response.should be_success
				assigns(:section).should be_a_new(Section)
			end
		end

		describe "POST create" do
			describe "with valid params" do
				it "redirects to the created section" do
					post :create, {:section => valid_attributes}
					response.should redirect_to(Section.last)
				end

				it "assigns a newly created section as @section" do
					post :create, {:section => valid_attributes}
					assigns(:section).should be_a(Section)
					assigns(:section).should be_persisted
				end

				it "creates a new Section" do
					expect {
						post :create, {section: valid_attributes}
					}.to change(Section, :count).by(1)
				end
			end

			describe "with invalid params" do
				it "assigns a newly created but unsaved section as @section" do
				 # Trigger the behavior that occurs when invalid params are submitted
					Section.any_instance.stubs(:save).returns(false)
					post :create, {:section => {}}
					assigns(:section).should be_a_new(Section)
				end

				it "re-renders the 'new' template" do
					# Trigger the behavior that occurs when invalid params are submitted
					Section.any_instance.stubs(:save).returns(false)
					post :create, {:section => {}}
					response.should render_template("new")
				end
			end
		end

		describe "PUT update" do
			describe "with valid params" do
				it "updates the requested section" do
					section = Section.create! valid_attributes
					# Assuming there are no other sections in the database, this
					# specifies that the Section created on the previous line
					# receives the :update_attributes message with whatever params are
					# submitted in the request.
					Section.any_instance.expects(:update_attributes).with({"block" => "C"})
					put :update, {:id => section.to_param, :section => {"block" => "C"} }
				end

				it "assigns the requested section as @section" do
					section = Section.create! valid_attributes
					put :update, {:id => section.to_param, :section => valid_attributes}
					assigns(:section).should eq(section)
				end

				it "redirects to the section" do
				 	section = Section.create! valid_attributes
					put :update, {:id => section.to_param, :section => valid_attributes}
					response.should redirect_to(section)
				end
			end

			describe "with invalid params" do
				it "assigns the section as @section" do
					section = Section.create! valid_attributes
					# Trigger the behavior that occurs when invalid params are submitted
					Section.any_instance.stubs(:save).returns(false)
					put :update, {:id => section.to_param, :section => {}}
					assigns(:section).should eq(section)
				end

				it "re-renders the 'edit' template" do
					section = Section.create! valid_attributes
					# Trigger the behavior that occurs when invalid params are submitted
					Section.any_instance.stubs(:save).returns(false)
					put :update, {:id => section.to_param, :section => {}}
					response.should render_template("edit")
				end
			end
		end

		describe "DELETE destroy" do
			it "destroys the requested section" do
				section = Section.create! valid_attributes
				pending "Unfinished test"
				expect {
					delete :destroy, { :id => section.to_param }
				}.to change(Section, :count).by(-1)
			end

			it "redirects to the sections list" do
			 	section = Section.create! valid_attributes
				pending "Problem with calling delete"
				delete :destroy, {:id => section.to_param}
				response.should redirect_to(sections_url)
			end
		end

	end
		
	context "admin accessible" do
		login_admin

		describe "GET index" do
			it "assigns all sections as @sections" do
				section = Section.create! valid_attributes
				get :index, {}
				assigns(:sections).should eq([section])
			end
		end

		describe "GET show" do
			it "assigns the requested section as @section" do
				section = Section.create! valid_attributes
				get :show, {:id => section.to_param}
				assigns(:section).should eq(section)
			end
		end

	end

end
