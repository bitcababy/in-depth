require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Admin::CoursesController do
	login_admin

  # This should return the minimal set of attributes required to create a valid
  # Admin::Course. As you add validations to Admin::Course, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
		number: 321,
		full_name: 'Geometry Honors',
		}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Admin::CoursesController. Be sure to keep this updated too.

  describe "GET index" do
    it "assigns all courses as @courses" do
      course = Fabricate :course, valid_attributes
      get :index, {}
      assigns(:courses).should eq([course])
    end
  end

  describe "GET show" do
    it "assigns the requested course as @course" do
      course = Fabricate :course, valid_attributes
      get :show, {:id => course.to_param}
      assigns(:course).should eq(course)
    end
  end

  describe "GET new" do
    it "assigns a new course as @course" do
      get :new, {}
      assigns(:course).should be_a_new(Course)
    end
  end

  describe "GET edit" do
    it "assigns the requested course as @course" do
      course = Fabricate :course, valid_attributes
      get :edit, {:id => course.to_param}
      assigns(:course).should eq(course)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Course" do
        expect {
          post :create, {:course => valid_attributes}
        }.to change(Course, :count).by(1)
      end

      it "assigns a newly created course as @course" do
        post :create, {:course => valid_attributes}
        assigns(:course).should be_a(Course)
        assigns(:course).should be_persisted
      end

      it "redirects to the created course" do
        post :create, {:course => valid_attributes}
        response.should redirect_to(admin_course_url(Course.last))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved course as @course" do
        # Trigger the behavior that occurs when invalid params are submitted
	      Course.any_instance.stubs(:save).returns(false)
        post :create, {:course => {}}
        assigns(:course).should be_a_new(Course)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
       	Course.any_instance.stubs(:save).returns(false)
        post :create, {:course => {}}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested course" do
        course = Fabricate :course, valid_attributes
        # Assuming there are no other courses in the database, this
        # specifies that the Course created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Course.any_instance.expects(:update_attributes).with({'number' => '322'})
        put :update, {:id => course.to_param, :course => {'number' => '322'}}
      end

      it "assigns the requested course as @course" do
       	course = Fabricate :course, valid_attributes
        put :update, {:id => course.to_param, :course => valid_attributes}
        assigns(:course).should eq(course)
      end

      it "redirects to the course" do
        course = Fabricate :course, valid_attributes
        put :update, {:id => course.to_param, :course => valid_attributes}
        response.should redirect_to(admin_course_url(course))
      end
    end

    describe "with invalid params" do
      it "assigns the course as @course" do
        course = Fabricate :course, valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Course.any_instance.stubs(:save).returns(false)
        put :update, {:id => course.to_param, :course => {}}
        assigns(:course).should eq(course)
      end

      it "re-renders the 'edit' template" do
        course = Fabricate :course, valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Course.any_instance.stubs(:save).returns(false)
        put :update, {:id => course.to_param, :course => {}}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested course" do
     	course = Fabricate :course, valid_attributes
      expect {
        delete :destroy, {:id => course.to_param}
      }.to change(Course, :count).by(-1)
    end

    it "redirects to the courses list" do
     	course = Fabricate :course, valid_attributes
      delete :destroy, {:id => course.to_param}
      response.should redirect_to(admin_courses_url)
    end
  end

end
